module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nfunction register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ');\n                });\n            }\n            else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\nexports.register = register;\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        console.log('New content is available; please refresh.');\n                        if (config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    }\n                    else {\n                        console.log('Content is cached for offline use.');\n                        if (config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n        .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n        if (response.status === 404 ||\n            response.headers.get('content-type').indexOf('javascript') === -1) {\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        }\n        else {\n            registerValidSW(swUrl, config);\n        }\n    })\n        .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\nfunction unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\nexports.unregister = unregister;\n//# sourceMappingURL=app.js.map",
dependencies: ["process"],
sourceMap: "{\"version\":3,\"file\":\"serviceWorker.js\",\"sourceRoot\":\"\",\"sources\":[\"/src/serviceWorker.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the \\\"N+1\\\" visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/offgridnetworks/fuse-box-create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Lets check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          );\\n        });\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the old content will have been purged and\\n              // the fresh content will have been added to the cache.\\n              // It's the perfect time to display a \\\"New content is\\n              // available; please refresh.\\\" message in your web app.\\n              console.log('New content is available; please refresh.');\\n\\n              // Execute callback\\n              if (config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\"]}",
headerContent: ["/* fuse:injection: */ var process = require(\"process\");"],
mtime: 1530386921000,
devLibsRequired : undefined,
ac : undefined,
_ : {}
}
